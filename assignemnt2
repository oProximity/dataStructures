//test_rational.cpp
#include <cmath>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include "rational.h"

using namespace std;

int main()
{
rational r1(4, 7);
rational r2(2, 7);
cout << "r1 " << r1 << endl;
cout << "r2 " << r2 << endl;
cout << "+ operator r1 + r2 " << r1 + r2 << endl;
cout << "* operator r1 * r2 " << r1 * r2 << endl;
cout << "- operator r2 - r1 " << r2 - r1 << endl;
cout << "/ operator r1 / r2 " << r1 / r2 << endl;

if(r1 != r2) {
	cout << "r1 is not equal to r2, this test both the == and !=" << endl;
}//end if

cout << endl;

rational r3 (4, 8);
cout << "r3 before being reduced " << r3 << endl;

cout << "r3 after being reduced " << reduce(r3) << endl;
return EXIT_SUCCESS;
}//end main

//rational.cpp
/**********************************************
*class: cs 3305/04
*term: spring 2019
*Name: 
*instructor: Monisha Verma
*assignment: homework 2 rational.cpp
*********************************************/
#include <cassert>
#include <cmath>
#include <iostream>
#include "rational.h"

using namespace std;

rational::rational(int n, int d)
{
	assert (d != 0);
	numer = n;
	denom = d;
}//end rational constructor

int rational::get_numer() const {
	return numer;
}//end get_numer

int rational::get_denom() const {
	return denom;
}//end get_denom


bool operator == (const rational& r1, const rational& r2) {
	int x = r1.get_numer();
	int y = r1.get_denom();
	int a = r2.get_numer();
	int b = r2.get_denom();
	
	return ( (x * b) == (a * y) );	
}//end ==

bool operator != (const rational& r1, const rational& r2) {
	return !(r1 == r2);
}//end !=

rational operator + (const rational& r1, const rational& r2) {
	assert( r1.get_denom() == r2.get_denom() );
	
	int x = ( r1.get_numer() + r2.get_numer() );
	int y = r1.get_denom();
	return rational(x, y);
}//end overloaded +

rational operator - (const rational& r1, const rational& r2) {
	assert( r1.get_denom() == r2.get_denom() );
	
	int x = (r1.get_numer() - r2.get_numer() );
	int y = r1.get_denom();
	
	return rational(x, y);
}// end overloaded -

rational operator * (const rational& r1, const rational& r2) {
	int x = ( r1.get_numer() * r2.get_numer() );
	int y = ( r1.get_denom() * r2.get_denom() );
	assert(y != 0);
	
	return rational(x, y);
}//end overloaded *

rational operator / (const rational& r1, const rational& r2) {
	int x = (r1.get_numer() * r2.get_denom() );
	int y = (r1.get_denom() * r2.get_numer() );
	assert(y != 0);
	
	return rational(x, y);
}//end overloaded /

ostream& operator << (ostream& outs, const rational& r) {
	outs << r.get_numer() << "/" << r.get_denom() << endl;
	return outs;
}//end overloaded <<

rational reduce (const rational& r) {
	int x = r.get_numer();
	int y = r.get_denom();
	for (int i = x * y; i >= 1; i--) {
		if ((x % i == 0) && (y % i == 0)) {
			x /= i;
			y /= i;
			
			return rational(x, y);
		}//end if
	}//end for
}//end reduce


//rational.h
/***********************************************
*class: cs3305/04
*term: spring 2019
*name: 
*Instructor: Monisha Verma
*assignment: homework 2 rational.h
***********************************************/
#ifndef RATIONAL_H
#define RATIONAL_H
#include <iostream>
#include <cmath>

class rational 
{ 
public:
	rational (int n, int d);
	//postcondition: rational number with given components has been created

	int get_numer() const;
	//returns numerator

	int get_denom() const;
	//returns denominator
private:
	int numer;
	int denom;
};//end class

bool operator == (const rational& r1, const rational& r2);
//returns true if r1 is equal to r2

bool operator != (const rational& r1, const rational& r2);
//returns true if r1 is not equal to r2

rational operator + (const rational& r1, const rational& r2);
//returned sum of r1 and r2

rational operator - (const rational& r1, const rational& r2);
//returns diffrance of r1 and r2

rational operator * (const rational& r1, const rational& r2);
//returns product of r1 and r2

rational operator / (const rational& r1, const rational& r2);
//precondition r2 is not zero
//returns the quotient of r1 and r2

rational reduce (const rational& r);
//reduces given ratinal

std::ostream& operator << (std::ostream& outs, const rational& r);
//postcondition r has been put in the output stream outs
//returned modified output stream outs

std::istream& operator >> (std::istream& ins, const rational& r);
//postcondition r is in the input stream ins
//returned: modified input stream ins


#endif // RATIONAL_H


